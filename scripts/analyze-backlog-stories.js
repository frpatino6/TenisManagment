#!/usr/bin/env node

/**
 * Script para analizar historias en backlog y ver su formato actual
 * Tennis Management System
 */

const { getLinearConfig, makeLinearRequest } = require('./linear-utils');

async function analyzeBacklogStories() {
  try {
    console.log('üìã Analizando historias en backlog...\n');

    const { teamId } = getLinearConfig();

    // Obtener todos los proyectos en backlog
    const projectsQuery = `
      query {
        projects(first: 20) {
          nodes {
            id
            name
            state
            issues {
              nodes {
                id
                title
                description
                number
                state {
                  name
                }
                labels {
                  nodes {
                    name
                    color
                  }
                }
                estimate
                priority
                url
              }
            }
          }
        }
      }
    `;

    const projectsResponse = await makeLinearRequest(projectsQuery);
    const allProjects = projectsResponse.data.projects.nodes;

    // Filtrar proyectos en backlog
    const backlogProjects = allProjects.filter(project => 
      project.state === 'backlog'
    );

    console.log(`üìã Proyectos en backlog: ${backlogProjects.length}\n`);

    let totalStories = 0;
    const storiesToUpdate = [];

    for (const project of backlogProjects) {
      console.log(`üìù Proyecto: ${project.name}`);
      console.log(`   üìä Issues: ${project.issues.nodes.length}`);
      
      if (project.issues.nodes.length > 0) {
        for (const issue of project.issues.nodes) {
          totalStories++;
          console.log(`\n   üìã Issue #${issue.number}: ${issue.title}`);
          console.log(`      üìù Descripci√≥n actual:`);
          console.log(`      ${issue.description || 'Sin descripci√≥n'}`);
          console.log(`      üè∑Ô∏è  Labels: ${issue.labels.nodes.map(l => l.name).join(', ') || 'Sin labels'}`);
          console.log(`      üìä Estimate: ${issue.estimate || 'Sin estimaci√≥n'}`);
          console.log(`      ‚ö° Priority: ${issue.priority}`);
          console.log(`      üîó URL: ${issue.url}`);
          
          // Analizar si necesita actualizaci√≥n
          const needsUpdate = {
            hasDescription: !!issue.description,
            hasLabels: issue.labels.nodes.length > 0,
            hasEstimate: !!issue.estimate,
            descriptionFormat: issue.description ? issue.description.includes('## Descripci√≥n') : false,
            hasAcceptanceCriteria: issue.description ? issue.description.includes('## Criterios de Aceptaci√≥n') : false
          };
          
          console.log(`      üîç An√°lisis:`);
          console.log(`         - Tiene descripci√≥n: ${needsUpdate.hasDescription ? '‚úÖ' : '‚ùå'}`);
          console.log(`         - Tiene labels: ${needsUpdate.hasLabels ? '‚úÖ' : '‚ùå'}`);
          console.log(`         - Tiene estimaci√≥n: ${needsUpdate.hasEstimate ? '‚úÖ' : '‚ùå'}`);
          console.log(`         - Formato est√°ndar: ${needsUpdate.descriptionFormat ? '‚úÖ' : '‚ùå'}`);
          console.log(`         - Criterios de aceptaci√≥n: ${needsUpdate.hasAcceptanceCriteria ? '‚úÖ' : '‚ùå'}`);
          
          if (!needsUpdate.hasDescription || !needsUpdate.hasLabels || !needsUpdate.hasEstimate || 
              !needsUpdate.descriptionFormat || !needsUpdate.hasAcceptanceCriteria) {
            storiesToUpdate.push({
              id: issue.id,
              number: issue.number,
              title: issue.title,
              currentDescription: issue.description,
              project: project.name,
              needsUpdate
            });
          }
        }
      }
      console.log('\n' + '‚îÄ'.repeat(60) + '\n');
    }

    console.log(`üìä RESUMEN DEL AN√ÅLISIS:`);
    console.log(`‚îÄ`.repeat(50));
    console.log(`üìã Total de historias analizadas: ${totalStories}`);
    console.log(`üîÑ Historias que necesitan actualizaci√≥n: ${storiesToUpdate.length}`);
    console.log(`‚úÖ Historias ya estandarizadas: ${totalStories - storiesToUpdate.length}`);

    if (storiesToUpdate.length > 0) {
      console.log(`\nüîÑ HISTORIAS A ACTUALIZAR:`);
      console.log(`‚îÄ`.repeat(50));
      storiesToUpdate.forEach(story => {
        console.log(`üìã #${story.number}: ${story.title}`);
        console.log(`   üìÅ Proyecto: ${story.project}`);
        console.log(`   ‚ùå Faltan: ${Object.entries(story.needsUpdate)
          .filter(([key, value]) => !value)
          .map(([key]) => key.replace(/([A-Z])/g, ' $1').toLowerCase())
          .join(', ')}`);
      });
    }

    return storiesToUpdate;

  } catch (error) {
    console.error('‚ùå Error analizando historias:', error.message);
    if (error.response) {
      console.error('Response:', error.response);
    }
    process.exit(1);
  }
}

// Ejecutar el script
analyzeBacklogStories();
